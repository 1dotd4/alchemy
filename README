Alchemy

Add to the `cauldron` some stuff and remember to stir.

=== Usage notes ===

Entry point: `cd src && ./cauldron.scm`
To reload files: `(load-source)`
To reload tests: `(load-test)`
Note: you will need to reopen the repl if the load change or redefine it manually.
TODO dynamic load written in scheme

Build instruction: `csc stuff.scm -J; ...; csc cauldron.scm` TODO

=== Notes ===

TODO:
- find better ASCII art for title and sections
- write the chicken-install needed
- thanks to dieggsy#chicken

Tools:
- CHICKEN-SCHEME
- Chart: slib-chartplot, gnuplot-pipe
- REPL shell: linenoise
- TCP: https://wiki.call-cc.org/man/5/Module%20(chicken%20tcp)
- json: https://wiki.call-cc.org/eggref/5/medea
- SLIB: http://people.csail.mit.edu/jaffer/slib/
- AES: http://wiki.call-cc.org/eggref/5/aes
- Literate programming: http://www.literateprogramming.com/
- The Scheme Programming Language: https://www.scheme.com/tspl4/

Goals:
- APL-like functions
- math
- bit stuff
- cryptography
- cryptanalysis
- old crypto breaking
- pwntools-like (connect, recv, write, pack?, unpack?)


Subduction
The separation or abstraction downward of the subtle part, as in filtration.

https://www.alchemywebsite.com/alch-pro.html


APL-like functions

Unary operators
Name                  APL   Ivy     Alchemy                 Meaning
Roll                  ?B    ?       .                       One integer selected randomly from the first B integers
Ceiling               ⌈B    ceil    ceil#                   Least integer greater than or equal to B
Floor                 ⌊B    floor   floor*                  Greatest integer less than or equal to B
Shape                 ⍴B    rho     rho#                    Number of components in each dimension of B
Not                   ∼B    not     not*                    Logical: not 1 is 0, not 0 is 1
Absolute value        ∣B    abs     abs*                    Magnitude of B
Index generator       ⍳B    iota    iota#                   Vector of the first B integers
Exponential           ⋆B    **      .                       e to the B power
Negation              −B    -       -*                      Changes sign of B
Identity              +B    +       +*                      No change to B
Signum                ×B    sgn     positive*               ¯1 if B<0; 0 if B=0; 1 if B>0
Reciprocal            ÷B    /       /*                      1 divided by B
Ravel                 ,B    ,       .                       Reshapes B into a vector
Matrix inverse        ⌹B            .                       Inverse of matrix B
Pi times              ○B            .                       Multiply by π
Logarithm             ⍟B    log     log                     Natural logarithm of B
Reversal              ⌽B    rot     .                       Reverse elements of B along last axis
Reversal              ⊖B    flip    .                       Reverse elements of B along first axis
Grade up              ⍋B    up      .                       Indices of B which will arrange B in ascending order
Grade down            ⍒B    down    .                       Indices of B which will arrange B in descending order
Execute               ⍎B    ivy     .                       Execute an APL (ivy) expression
Monadic format        ⍕B    text    .                       A character representation of B
Monadic transpose     ⍉B    transp  .                       Reverse the axes of B
Factorial             !B    !       .                       Product of integers 1 to B
Bitwise not                 ^       .                       Bitwise complement of B (integer only)

Binary operators
Name                  APL   Ivy     Alchemy                 Meaning
Add                   A+B   +       +*                      Sum of A and B
Subtract              A−B   -       -*                      A minus B
Multiply              A×B   *       **                      A multiplied by B
Divide                A÷B   /       /*                      A divided by B (exact rational division)
                            div     euclidean-division      A divided by B (Euclidean)
                            idiv    .                       A divided by B (Go)
Exponentiation        A⋆B   **      .                       A raised to the B power
Circle                A○B           .                       Trigonometric functions of B selected by A
                                                            A=1: sin(B) A=2: cos(B) A=3: tan(B); ¯A for inverse
                            sin     .                       sin(B); ivy uses traditional name.
                            cos     .                       cos(B); ivy uses traditional name.
                            tan     .                       tan(B); ivy uses traditional name.
                            asin    .                       arcsin(B); ivy uses traditional name.
                            acos    .                       arccos(B); ivy uses traditional name.
                            atan    .                       arctan(B); ivy uses traditional name.
Deal                  A?B   ?       .                       A distinct integers selected randomly from the first B integers
Membership            A∈B   in      .                       1 for elements of A present in B; 0 where not.
Maximum               A⌈B   max     .                       The greater value of A or B
Minimum               A⌊B   min     .                       The smaller value of A or B
Reshape               A⍴B   rho     rho#                    Array of shape A with data B
Take                  A↑B   take    .                       Select the first (or last) A elements of B according to ×A
Drop                  A↓B   drop    .                       Remove the first (or last) A elements of B according to ×A
Decode                A⊥B   decode  .                       Value of a polynomial whose coefficients are B at A
Encode                A⊤B   encode  .                       Base-A representation of the value of B
Residue               A∣B           .                       B modulo A
                            mod     .                       A modulo B (Euclidean)
                            imod    .                       A modulo B (Go)
Catenation            A,B   ,       .                       Elements of B appended to the elements of A
Expansion             A\B   fill    .                       Insert zeros (or blanks) in B corresponding to zeros in A
                                    .                       In ivy: abs(A) gives count, A <= 0 inserts zero (or blank)
Compression           A/B   sel     .                       Select elements in B corresponding to ones in A
                                    .                       In ivy: abs(A) gives count, A <= 0 inserts zero
Index of              A⍳B   iota    .                       The location (index) of B in A; 1+⌈/⍳⍴A if not found
                                    .                       In ivy: origin-1 if not found (i.e. 0 if one-indexed)
Matrix divide         A⌹B           .                       Solution to system of linear equations Ax = B
Rotation              A⌽B   rot     .                       The elements of B are rotated A positions left
Rotation              A⊖B   flip    .                       The elements of B are rotated A positions along the first axis
Logarithm             A⍟B   log     .                       Logarithm of B to base A
Dyadic format         A⍕B   text    .                       Format B into a character matrix according to A
                                                            A is the textual format (see format special command);
                                                            otherwise result depends on length of A:
                                                            1 gives decimal count, 2 gives width and decimal count,
                                                            3 gives width, decimal count, and style ('d', 'e', 'f', etc.).
General transpose     A⍉B           .                       The axes of B are ordered by A
Combinations          A!B   !       .                       Number of combinations of B taken A at a time
Less than             A<B   <       <*                      Comparison: 1 if true, 0 if false
Less than or equal    A≤B   <=      <=*                     Comparison: 1 if true, 0 if false
Equal                 A=B   ==      .                       Comparison: 1 if true, 0 if false
Greater than or equal A≥B   >=      >=*                     Comparison: 1 if true, 0 if false
Greater than          A>B   >       >*                      Comparison: 1 if true, 0 if false
Not equal             A≠B   !=      .                       Comparison: 1 if true, 0 if false
Or                    A∨B   or      or                      Logic: 0 if A and B are 0; 1 otherwise
And                   A∧B   and     and                     Logic: 1 if A and B are 1; 0 otherwise
Nor                   A⍱B   nor     .                       Logic: 1 if both A and B are 0; otherwise 0
Nand                  A⍲B   nand    .                       Logic: 0 if both A and B are 1; otherwise 1
Xor                         xor     .                       Logic: 1 if A != B; otherwise 0
Bitwise and                 &       .                       Bitwise A and B (integer only)
Bitwise or                  |       .                       Bitwise A or B (integer only)
Bitwise xor                 ^       .                       Bitwise A exclusive or B (integer only)
Left shift                  <<      .                       A shifted left B bits (integer only)
Right Shift                 >>      .                       A shifted right B bits (integer only)

Operators and axis indicator
Name                APL  Ivy  APL Example  Ivy Example  Meaning (of example)
Reduce (last axis)  /    /    +/B          +/B          Sum across B
Reduce (first axis) ⌿         +⌿B                       Sum down B
Scan (last axis)    \    \    +\B          +\B          Running sum across B
Scan (first axis)   ⍀         +⍀B                       Running sum down B
Inner product       .    .    A+.×B        A +.* B      Matrix product of A and B
Outer product       ∘.   o.   A∘.×B        A o.* B      Outer product of A and B
                                                        (lower case o; may need preceding space)
. TBD
~ wont implement
* already implemented
# TODO

Omitted functions from APL/Ivy are already implemented or not useful

Typed arrays/vectors/matrices, tagged or nothing?
